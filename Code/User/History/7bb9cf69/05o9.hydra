=== HYDRA COMPILER ===
Compiling file: test.hydra

=== TOKENIZING ===
Tokenization successful
Tokens found: 63

All tokens:
    0: Token { token_type: Newline, lexeme: "\n", line: 1, column: 1 }
    1: Token { token_type: Function, lexeme: "fn", line: 2, column: 0 }
    2: Token { token_type: Identifier("add"), lexeme: "add", line: 2, column: 3 }
    3: Token { token_type: LeftParen, lexeme: "(", line: 2, column: 6 }
    4: Token { token_type: Identifier("a"), lexeme: "a", line: 2, column: 7 }
    5: Token { token_type: Colon, lexeme: ":", line: 2, column: 8 }
    6: Token { token_type: I32, lexeme: "i32", line: 2, column: 10 }
    7: Token { token_type: Comma, lexeme: ",", line: 2, column: 13 }
    8: Token { token_type: Identifier("b"), lexeme: "b", line: 2, column: 15 }
    9: Token { token_type: Colon, lexeme: ":", line: 2, column: 16 }
   10: Token { token_type: I32, lexeme: "i32", line: 2, column: 18 }
   11: Token { token_type: RightParen, lexeme: ")", line: 2, column: 21 }
   12: Token { token_type: LeftBrace, lexeme: "{", line: 2, column: 23 }
   13: Token { token_type: Newline, lexeme: "\n", line: 2, column: 24 }
   14: Token { token_type: Return, lexeme: "return", line: 3, column: 4 }
   15: Token { token_type: Identifier("a"), lexeme: "a", line: 3, column: 11 }
   16: Token { token_type: Plus, lexeme: "+", line: 3, column: 13 }
   17: Token { token_type: Identifier("b"), lexeme: "b", line: 3, column: 15 }
   18: Token { token_type: Semicolon, lexeme: ";", line: 3, column: 16 }
   19: Token { token_type: Newline, lexeme: "\n", line: 3, column: 17 }
   20: Token { token_type: RightBrace, lexeme: "}", line: 4, column: 0 }
   21: Token { token_type: Newline, lexeme: "\n", line: 4, column: 1 }
   22: Token { token_type: Newline, lexeme: "\n", line: 5, column: 0 }
   23: Token { token_type: Function, lexeme: "fn", line: 6, column: 0 }
   24: Token { token_type: Identifier("main"), lexeme: "main", line: 6, column: 3 }
   25: Token { token_type: LeftParen, lexeme: "(", line: 6, column: 7 }
   26: Token { token_type: RightParen, lexeme: ")", line: 6, column: 8 }
   27: Token { token_type: Arrow, lexeme: "->", line: 6, column: 10 }
   28: Token { token_type: VoidType, lexeme: "void", line: 6, column: 13 }
   29: Token { token_type: LeftBrace, lexeme: "{", line: 6, column: 18 }
   30: Token { token_type: Newline, lexeme: "\n", line: 6, column: 19 }
   31: Token { token_type: Let, lexeme: "let", line: 7, column: 4 }
   32: Token { token_type: Identifier("a"), lexeme: "a", line: 7, column: 8 }
   33: Token { token_type: Colon, lexeme: ":", line: 7, column: 9 }
   34: Token { token_type: I32, lexeme: "i32", line: 7, column: 11 }
   35: Token { token_type: Assign, lexeme: "=", line: 7, column: 15 }
   36: Token { token_type: IntLiteral(11), lexeme: "11", line: 7, column: 17 }
   37: Token { token_type: Semicolon, lexeme: ";", line: 7, column: 19 }
   38: Token { token_type: Newline, lexeme: "\n", line: 7, column: 20 }
   39: Token { token_type: Let, lexeme: "let", line: 8, column: 4 }
   40: Token { token_type: Identifier("b"), lexeme: "b", line: 8, column: 8 }
   41: Token { token_type: Colon, lexeme: ":", line: 8, column: 9 }
   42: Token { token_type: I32, lexeme: "i32", line: 8, column: 11 }
   43: Token { token_type: Assign, lexeme: "=", line: 8, column: 15 }
   44: Token { token_type: IntLiteral(11), lexeme: "11", line: 8, column: 17 }
   45: Token { token_type: Semicolon, lexeme: ";", line: 8, column: 19 }
   46: Token { token_type: Newline, lexeme: "\n", line: 8, column: 20 }
   47: Token { token_type: Newline, lexeme: "\n", line: 9, column: 0 }
   48: Token { token_type: Let, lexeme: "let", line: 10, column: 4 }
   49: Token { token_type: Identifier("sum"), lexeme: "sum", line: 10, column: 8 }
   50: Token { token_type: Colon, lexeme: ":", line: 10, column: 11 }
   51: Token { token_type: I32, lexeme: "i32", line: 10, column: 13 }
   52: Token { token_type: Assign, lexeme: "=", line: 10, column: 17 }
   53: Token { token_type: Identifier("add"), lexeme: "add", line: 10, column: 19 }
   54: Token { token_type: LeftParen, lexeme: "(", line: 10, column: 22 }
   55: Token { token_type: Identifier("a"), lexeme: "a", line: 10, column: 23 }
   56: Token { token_type: Comma, lexeme: ",", line: 10, column: 24 }
   57: Token { token_type: Identifier("b"), lexeme: "b", line: 10, column: 26 }
   58: Token { token_type: RightParen, lexeme: ")", line: 10, column: 27 }
   59: Token { token_type: Semicolon, lexeme: ";", line: 10, column: 28 }
   60: Token { token_type: Newline, lexeme: "\n", line: 10, column: 29 }
   61: Token { token_type: RightBrace, lexeme: "}", line: 11, column: 0 }
   62: Token { token_type: Eof, lexeme: "", line: 11, column: 1 }

Tokens (raw):
Token { token_type: Newline, lexeme: "\n", line: 1, column: 1 }
Token { token_type: Function, lexeme: "fn", line: 2, column: 0 }
Token { token_type: Identifier("add"), lexeme: "add", line: 2, column: 3 }
Token { token_type: LeftParen, lexeme: "(", line: 2, column: 6 }
Token { token_type: Identifier("a"), lexeme: "a", line: 2, column: 7 }
Token { token_type: Colon, lexeme: ":", line: 2, column: 8 }
Token { token_type: I32, lexeme: "i32", line: 2, column: 10 }
Token { token_type: Comma, lexeme: ",", line: 2, column: 13 }
Token { token_type: Identifier("b"), lexeme: "b", line: 2, column: 15 }
Token { token_type: Colon, lexeme: ":", line: 2, column: 16 }
Token { token_type: I32, lexeme: "i32", line: 2, column: 18 }
Token { token_type: RightParen, lexeme: ")", line: 2, column: 21 }
Token { token_type: LeftBrace, lexeme: "{", line: 2, column: 23 }
Token { token_type: Newline, lexeme: "\n", line: 2, column: 24 }
Token { token_type: Return, lexeme: "return", line: 3, column: 4 }
Token { token_type: Identifier("a"), lexeme: "a", line: 3, column: 11 }
Token { token_type: Plus, lexeme: "+", line: 3, column: 13 }
Token { token_type: Identifier("b"), lexeme: "b", line: 3, column: 15 }
Token { token_type: Semicolon, lexeme: ";", line: 3, column: 16 }
Token { token_type: Newline, lexeme: "\n", line: 3, column: 17 }
Token { token_type: RightBrace, lexeme: "}", line: 4, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 4, column: 1 }
Token { token_type: Newline, lexeme: "\n", line: 5, column: 0 }
Token { token_type: Function, lexeme: "fn", line: 6, column: 0 }
Token { token_type: Identifier("main"), lexeme: "main", line: 6, column: 3 }
Token { token_type: LeftParen, lexeme: "(", line: 6, column: 7 }
Token { token_type: RightParen, lexeme: ")", line: 6, column: 8 }
Token { token_type: Arrow, lexeme: "->", line: 6, column: 10 }
Token { token_type: VoidType, lexeme: "void", line: 6, column: 13 }
Token { token_type: LeftBrace, lexeme: "{", line: 6, column: 18 }
Token { token_type: Newline, lexeme: "\n", line: 6, column: 19 }
Token { token_type: Let, lexeme: "let", line: 7, column: 4 }
Token { token_type: Identifier("a"), lexeme: "a", line: 7, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 7, column: 9 }
Token { token_type: I32, lexeme: "i32", line: 7, column: 11 }
Token { token_type: Assign, lexeme: "=", line: 7, column: 15 }
Token { token_type: IntLiteral(11), lexeme: "11", line: 7, column: 17 }
Token { token_type: Semicolon, lexeme: ";", line: 7, column: 19 }
Token { token_type: Newline, lexeme: "\n", line: 7, column: 20 }
Token { token_type: Let, lexeme: "let", line: 8, column: 4 }
Token { token_type: Identifier("b"), lexeme: "b", line: 8, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 8, column: 9 }
Token { token_type: I32, lexeme: "i32", line: 8, column: 11 }
Token { token_type: Assign, lexeme: "=", line: 8, column: 15 }
Token { token_type: IntLiteral(11), lexeme: "11", line: 8, column: 17 }
Token { token_type: Semicolon, lexeme: ";", line: 8, column: 19 }
Token { token_type: Newline, lexeme: "\n", line: 8, column: 20 }
Token { token_type: Newline, lexeme: "\n", line: 9, column: 0 }
Token { token_type: Let, lexeme: "let", line: 10, column: 4 }
Token { token_type: Identifier("sum"), lexeme: "sum", line: 10, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 10, column: 11 }
Token { token_type: I32, lexeme: "i32", line: 10, column: 13 }
Token { token_type: Assign, lexeme: "=", line: 10, column: 17 }
Token { token_type: Identifier("add"), lexeme: "add", line: 10, column: 19 }
Token { token_type: LeftParen, lexeme: "(", line: 10, column: 22 }
Token { token_type: Identifier("a"), lexeme: "a", line: 10, column: 23 }
Token { token_type: Comma, lexeme: ",", line: 10, column: 24 }
Token { token_type: Identifier("b"), lexeme: "b", line: 10, column: 26 }
Token { token_type: RightParen, lexeme: ")", line: 10, column: 27 }
Token { token_type: Semicolon, lexeme: ";", line: 10, column: 28 }
Token { token_type: Newline, lexeme: "\n", line: 10, column: 29 }
Token { token_type: RightBrace, lexeme: "}", line: 11, column: 0 }
Token { token_type: Eof, lexeme: "", line: 11, column: 1 }